# libds
# Copyright (c) Chunfeng Zhang(CrazyPandar@gmail.com), All rights reserved.
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3.0 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FIDSESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library.
#
include config.mk
TARGET = libds

DS_PLAT ?= unix
DS_CFLAGS +=  -I../src/include
DS_CFLAGS += -I../src/include/$(DS_PLAT)


ifeq ($(DS_PLAT), unix)
ALL = $(TARGET).a.$(VER) $(TARGET).so.$(VER)
DS_CC ?= gcc
DS_AR ?= ar
DS_AR_FLAGS ?= rcs
DS_CFLAGS += -Wall -Wno-unused-label -Wno-unused-function
DS_CFLAGS += -fPIC
DS_LDFLAGS += -Wl,--as-needed
DS_LDFLAGS += -Wl,-soname -Wl,$(TARGET)

endif

ifeq ($(DS_PLAT), mingw)
ALL = $(TARGET).a.$(VER) $(TARGET).dll.$(VER)
DS_CFLAGS += -D_WIN32_
endif

ifeq ($(DS_PLAT), esp)
ALL = $(TARGET).a.$(VER)
ESP_CROSS_COMPILE ?= ../../esp8266/toolchain/xtensa-lx106-elf/bin/xtensa-lx106-elf-

ESP_SYS_DIR ?= ../../esp8266/sys_sdk
ESP_SYS_INC_DIR ?= $(ESP_SYS_DIR)/include
ESP_SYS_LIB_DIR ?= $(ESP_SYS_DIR)/libs

ESP_SDK_DIR ?= ../../esp8266/sdk/esp_iot_sdk
ESP_SDK_INC_DIR ?= $(ESP_SDK_DIR)/include
ESP_SDK_LIB_DIR ?= $(ESP_SDK_DIR)/lib

DS_CC ?= $(ESP_CROSS_COMPILE)gcc
DS_AR ?= $(ESP_CROSS_COMPILE)ar
DS_AR_FLAGS ?= cru

DS_CFLAGS += -Os -g -O2 -Wpointer-arith -Wundef -Werror -Wl,-EL -fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals  -D__ets__ -DICACHE_FLASH
DS_CFLAGS += -I$(ESP_SYS_INC_DIR) -I$(ESP_SDK_INC_DIR)
endif

ifeq ($(DS_DEBUG),yes)
DS_CFLAGS += -g
else
DS_CFLAGS += -s -O2
DS_LDFLAGS += -s -O2
endif

ifeq ($(DS_USE_LCF_LOG), yes)
DS_CFLAGS += -D_USE_LCF_LOG_
endif

#####################################################
DS_OBJS = ds_log.o ds_utils.o ds_string.o ds_buffer.o ds_list.o ds_crypt.o ds_object.o
DS_OBJS += $(DS_PLAT)/ds_plat_basic.o
DS_OBJS += $(DS_PLAT)/ds_udp_stream.o
DS_OBJS += $(DS_PLAT)/ds_tcp_stream.o
DS_OBJS += ds_http_client.o

ifeq ($(ENABLE_XMPP_CLIENT), yes)
DS_OBJS += ds_xmpp_client.o
DS_LDFLAGS += $(LDFLAGS_IKSEMEL) $(LDFLAGS_GNUTLS) $(LDFLAGS_GMP) $(LDFLAGS_NETTLE)
endif

###################################

default: all

help:
	@echo '[configure Environents]'
	@echo 'CFG_PLAT(unix | mingw | esp) <$(DS_PLAT)>'
	@echo 'CFG_CFLAGS <$(DS_CFLAGS)>'
	@echo 'CFG_LDFLAGS <$(DS_LDFLAGS)>'
	@echo 'CFG_ESP_SYS_DIR <$(ESP_SYS_DIR)>'
	@echo 'CFG_ESP_SDK_DIR <$(ESP_SDK_DIR)>'
	@echo 'CFG_ESP_CROSS_COMPILE <$(ESP_CROSS_COMPILE)>'
	@echo 'CFG_ENABLE_XMPP_CLIENT(yes | no) <$(DS_ENABLE_XMPP_CLIENT)>'
	@echo ''
	@echo '[configure example]'
	@echo 'make configure CFG_PLAT=unix CFG_ENABLE_XMPP_CLIENT=yes'
	@echo 'make configure CFG_PLAT=esp CFG_ESP_SYS_DIR=../../esp8266/sys_sdk CFG_ESP_SDK_DIR=../../esp8266/sdk/esp_iot_sdk CFG_ESP_CROSS_COMPILE ?= ../../esp8266/toolchain/xtensa-lx106-elf/bin/xtensa-lx106-elf-'

configure:
	@echo "#Auto generated by make configure" > config.mk
	@if [ _${CFG_CFLAGS} != _ ]; then echo DS_CFLAGS = ${CFG_CFLAGS} >> config.mk; fi
	@if [ _${CFG_LDLAGS} != _ ]; then echo DS_LDLAGS = ${CFG_LDLAGS} >> config.mk; fi
	@if [ _${CFG_PLAT} != _ ]; then echo DS_PLAT = ${CFG_PLAT} >> config.mk; fi
	@if [ _${CFG_ESP_SYS_DIR} != _ ]; then echo ESP_SYS_DIR = $(CFG_ESP_SYS_DIR) >> config.mk; fi
	@if [ _${CFG_ESP_SDK_DIR} != _ ]; then echo ESP_SDK_DIR = $(CFG_ESP_SDK_DIR) >> config.mk; fi
	@if [ _${CFG_ESP_CROSS_COMPILE} != _ ]; then echo ESP_CROSS_COMPILE = $(CFG_ESP_CROSS_COMPILE) >> config.mk; fi
	@if [ _${CFG_ENABLE_XMPP_CLIENT} != _ ]; then echo DS_ENABLE_XMPP_CLIENT = $(CFG_ENABLE_XMPP_CLIENT) >> config.mk; fi
	
all:$(ALL)

$(DS_PLAT)/%.o: ../src/platform/$(DS_PLAT)/%.c
	mkdir -p $(DS_PLAT)
	$(DS_CC) $(DS_CFLAGS) -c -o$@ $^

%.o: ../src/%.c
	$(DS_CC) $(DS_CFLAGS) -c -o$@ $^

$(TARGET).so.$(VER):$(DS_OBJS)
	$(DS_CC) -shared $(DS_LDFLAGS) -o$@ $^
	ln -sf $@ $(TARGET).so

$(TARGET).a.$(VER):$(DS_OBJS)
	$(DS_AR) $(DS_AR_FLAGS) $@ $^
	ln -sf $@ $(TARGET).a

install:
	#
     
uninstall:
	#rm -rf $(prefix)/lib/${TARGET} $(prefix)/lib/${TARGET}.$(VER)

clean:
	rm -f $(ALL) *.o $(DS_PLAT)/*.o

distclean:
	make clean
	echo > config.mk

.PHONY : default help configure all clean install uninstall
